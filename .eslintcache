[{"/Applications/MAMP/htdocs/100-my_projects/02-editable-user-account-panel/editable-user-account-panel/src/index.js":"1","/Applications/MAMP/htdocs/100-my_projects/02-editable-user-account-panel/editable-user-account-panel/src/reportWebVitals.js":"2","/Applications/MAMP/htdocs/100-my_projects/02-editable-user-account-panel/editable-user-account-panel/src/App.js":"3","/Applications/MAMP/htdocs/100-my_projects/02-editable-user-account-panel/editable-user-account-panel/src/components/Form.js":"4","/Applications/MAMP/htdocs/100-my_projects/02-editable-user-account-panel/editable-user-account-panel/src/Components/Form.js":"5"},{"size":499,"mtime":1609036959678,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1608971396693,"results":"8","hashOfConfig":"7"},{"size":188,"mtime":1609397356210,"results":"9","hashOfConfig":"7"},{"size":6032,"mtime":1609294840016,"results":"10","hashOfConfig":"7"},{"size":7401,"mtime":1609469677152,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1kkx6ti",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Applications/MAMP/htdocs/100-my_projects/02-editable-user-account-panel/editable-user-account-panel/src/index.js",[],["24","25"],"/Applications/MAMP/htdocs/100-my_projects/02-editable-user-account-panel/editable-user-account-panel/src/reportWebVitals.js",[],"/Applications/MAMP/htdocs/100-my_projects/02-editable-user-account-panel/editable-user-account-panel/src/App.js",[],"/Applications/MAMP/htdocs/100-my_projects/02-editable-user-account-panel/editable-user-account-panel/src/components/Form.js",["26"],"/Applications/MAMP/htdocs/100-my_projects/02-editable-user-account-panel/editable-user-account-panel/src/Components/Form.js",["27"],"import React, { useState, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport zxcvbn from 'zxcvbn';\nimport MD5 from 'crypto-js/md5';\nimport VisibilityOnIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\n\nfunction Form() {\n  // state: pw visibility\n  const [visibility, setVisibility] = useState(true);\n\n  // parse data from database (localstorage is used for development)\n  const storedData = JSON.parse(localStorage.getItem('data'));\n  \n  // hook useForm. get data from database (if any) and update default input values\n  const { register, handleSubmit, errors } = useForm({\n    defaultValues: {\n      fname: storedData ? storedData['fname'] : '',\n      lname: storedData ? storedData['lname'] : '',\n      email: storedData ? storedData['email'] : '',\n      password: storedData ? storedData['password'] : '',\n    }\n  });\n\n  // set userInputs array for validation use. if no database, then '';\n  let userInputs = {\n    fname: storedData ? storedData['fname'] : '',\n    lname: storedData ? storedData['lname'] : '',\n    email: storedData ? storedData['email'] : '',\n    password: storedData ? storedData['password'] : '',\n  };\n\n  const strength = { 0: \"Worst\", 1: \"Bad\", 2: \"Weak\", 3: \"Good\", 4: \"Strong\" };\n\n\n  // handle password visibility\n  const handlePwVisibility = () => {\n    setVisibility(!visibility);\n  }\n\n\n  // handle password strength check\n  const handleStrengthCheck = (passwordVal) => {\n    const meter = document.getElementById('password-strength-meter');\n    const text = document.getElementById('password-strength-text');\n  \n    // check strength *second arg only takes array\n    let result = zxcvbn(passwordVal, [userInputs.fname, userInputs.lname, userInputs.email]);\n\n    // Update the password strength meter\n    meter.value = result.score;\n\n    // Update the text indicator\n    if (passwordVal !== '') {\n      text.innerHTML = 'Strength: ' + strength[result.score]; \n    } else {\n      text.innerHTML = '';\n    }\n  }\n\n\n  // handle other fields state change, also store vals in custom obj for zxcvbn to use\n  const handleFieldValueChange = (key, e) => {\n    const inputVal = e.target.value;\n\n    userInputs[key] = inputVal;\n    handleStrengthCheck(userInputs.password);\n  }\n\n\n  // handle toggle mask/unmask pw\n  const handleTogglePasswordMask = () => {\n    const passwordDOM = document.getElementById('password');\n\n    if (passwordDOM.getAttribute('type') === 'password'){\n      passwordDOM.setAttribute('type', 'text');\n    } else {\n      passwordDOM.setAttribute('type', 'password');\n    }\n\n    handlePwVisibility();\n  };\n\n\n  // handle save input values to db (in this case, to local storage)\n  const handleOnSubmit = (data) => {\n    localStorage.setItem('data', JSON.stringify(data));\n  };\n\n\n  // handle update Gravatar\n  const handleUpdateGravatar = () => {\n    const gravatar = 'https://www.gravatar.com/avatar/';\n    const profileImg = document.getElementById('profileImg');\n    const email = document.getElementById('email');\n    const emailVal = email.value.replace(/\\s+/g, '').toLowerCase(); // no whitespace & lowercase for generating valid md5hash\n    const md5Hash = MD5(emailVal).toString(); \n    const imgURL = gravatar + md5Hash; // complete image url\n    \n    profileImg.setAttribute('src', imgURL);\n    profileImg.setAttribute('srcset', imgURL + ' 320w,' + imgURL + '?s=400 800w,');\n  };\n  useEffect(() => { handleUpdateGravatar() }); // update gravatar after load the page\n\n\n  return (\n    <div className=\"formWrapper\">\n      {/* Gravatar */}\n      <div className=\"sct-gravatar\">\n        <div className=\"sct-gravatar__imgWrap\">\n          <picture>\n            <img id=\"profileImg\" src=\"https://www.gravatar.com/avatar/\"\n            srcSet=\"https://www.gravatar.com/avatar/?s=20 320w, https://www.gravatar.com/avatar/?s=400 800w\" />\n          </picture>\n        </div>\n      </div>\n\n      <div className=\"sct-form\">\n        <form className=\"sct-form__form\" action=\"\" onSubmit={ handleSubmit(handleOnSubmit) }>\n          {/* first name */}\n          <div className=\"sct-form__field sct-form__field--fname\">\n            <label htmlFor=\"fname\">First Name</label>\n            <input \n              type=\"text\" \n              id=\"fname\" \n              name=\"fname\" \n              onChange={ (e) => { handleFieldValueChange('fname', e) } } \n              ref={ register({ \n                required: true,\n                pattern: { value: /^\\S*$/ }\n              }) } />\n              { errors.fname && <p>必須項目です。</p> }\n          </div>\n\n          {/* last name */}\n          <div className=\"sct-form__field sct-form__field--lname\">\n            <label htmlFor=\"lname\">Last Name</label>\n            <input \n              type=\"text\" \n              id=\"lname\" \n              name=\"lname\" \n              onChange={ (e) => { handleFieldValueChange('lname', e) } } \n              ref={ register({ \n                required: true,\n                pattern: { value: /^\\S*$/ }\n              }) } />\n            { errors.lname && <p>必須項目です。</p> }\n          </div>\n\n          {/* email */}\n          <div className=\"sct-form__field sct-form__field--email\">\n            <label htmlFor=\"email\">Email</label>\n            <input \n              type=\"text\" \n              id=\"email\" \n              name=\"email\" \n              onChange={ (e) => { \n                handleFieldValueChange('email', e);\n                handleUpdateGravatar(); \n              } } \n              ref={ register({ \n                required: true,\n                pattern: {　value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,}\n              }) \n            } />\n            { errors.email && errors.email.type === \"required\" && <p>必須項目です。</p> }\n            { errors.email && errors.email.type === \"pattern\" && <p>メールアドレスの形式が正しくありません。</p> }\n          </div>\n\n          {/* password */}\n          <div className=\"sct-form__field sct-form__field--password\">\n            <label htmlFor=\"password\">Password</label>\n            <input \n              type=\"password\" \n              id=\"password\"\n              name=\"password\"\n              onChange={ (e) => { handleFieldValueChange('password', e) } } \n              ref={ register({ \n                required: true,\n                pattern: { value: /^\\S*$/ }\n              }) } />\n            { errors.password && errors.password.type === \"required\" && <p>必須項目です。</p> }\n            { errors.password && errors.password.type === \"pattern\" && <p>スペースは使用できません。</p> }\n\n            <div className=\"sct-form__strength\">\n              <meter\n                className=\"form__pwMeter\"\n                max=\"4\" \n                id=\"password-strength-meter\"></meter>\n              <p id=\"password-strength-text\" className=\"form__strength\"></p>\n            </div>\n            \n            \n            <p \n              id=\"showPw\"\n              className=\"form__btn\"\n              onClick={ handleTogglePasswordMask } >\n                {visibility && (<VisibilityOffIcon />)}\n                {!visibility && (<VisibilityOnIcon />)}</p>\n          </div>\n\n          {/* submit */}\n          <div className=\"sct-form__field sct-form__field--btn\">\n            <input type=\"submit\" />\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n  \n}\n\nexport default Form;",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":90,"column":11,"nodeType":"34","endLine":92,"endColumn":37},{"ruleId":"35","severity":1,"message":"36","line":112,"column":13,"nodeType":"34","endLine":113,"endColumn":112},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]